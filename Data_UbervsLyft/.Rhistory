# Output: HTML table with requested number of observations ----
tableOutput("view"))
))
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(
input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars
)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- as.data.frame(head(datasetInput(), n = input$obs
summary(dataset))
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('Shiny/Text_switch')
runExample("02_text") # tables and data frames
ui <- fluidPage(titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(
inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")
),
# Input: Numeric entry for number of obs to view ----
numericInput(
inputId = "obs",
label = "Number of observations to view:",
value = 10
)
),
# Main panel for displaying outputs ----
mainPanel(# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view"))
))
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(
input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars
)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- as.data.frame(head(datasetInput(), n = input$obs))
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "caption3",
label = "Caption",
value = "Data Summary"),
selectInput(
inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")
),
numericInput(
inputId = "obs",
label = "Number of observations to view:",
value = 10
)
),
mainPanel(
h3(textOutput("caption", container = span)),
verbatimTextOutput("summary"),
tableOutput("view"))
))
server <- function(input, output) {
datasetInput <- reactive({
switch(
input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars
)
})
output$caption3 <- renderText[{
input$caption
}]
output$summary <- renderPrint({
dataset <- as.data.frame(head(datasetInput(), n = input$obs))
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "caption3",
label = "Caption",
value = "Data Summary"
),
selectInput(
inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")
),
numericInput(
inputId = "obs",
label = "Number of observations to view:",
value = 10
)
),
mainPanel(
h3(textOutput("caption", container = span)),
verbatimTextOutput("summary"),
tableOutput("view")
)
))
server <- function(input, output) {
datasetInput <- reactive({
switch(
input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars
)
})
output$caption3 <- renderText[{
input$caption
}]
output$summary <- renderPrint({
dataset <- as.data.frame(head(datasetInput(), n = input$obs))
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "caption3",
label = "Caption",
value = "Data Summary"
),
selectInput(
inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")
),
numericInput(
inputId = "obs",
label = "Number of observations to view:",
value = 10
)
),
mainPanel(
h3(textOutput("caption", container = span)),
verbatimTextOutput("summary"),
tableOutput("view")
)
))
server <- function(input, output) {
datasetInput <- {
switch(
input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars
)
}
output$caption3 <- renderText[{
input$caption
}]
output$summary <- renderPrint({
dataset <- as.data.frame(head(datasetInput(), n = input$obs))
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
runExample("04_mpg") # global variables
runExample("06_tabsets") # tabbed panels
runExample("05_sliders") # slider bars
shiny::runApp('C:/Users/admin/Desktop/EeD/R/Shiny_FIFA')
library(rsconnect)
rsconnect::setAccountInfo(name='ketanthakare',
token='87BE95D05CC1F8B0D12CE4B3EC5F636D',
secret='VfA9qN/iy+jLgC79X7PpF1VCAzYIhp88pmREintv')
library(rsconnect)
rsconnect::deployApp('app.R')
shiny::runApp('C:/Users/admin/Desktop/EeD/R/Shiny_FIFA')
library(rsconnect)
rsconnect::setAccountInfo(name='ketanthakare', token='ABFA6C8131B8845EA66D54A9B42A9C94', secret='EU8d8/qQS+kzvNXpBr+U8tP0thvXPBASszMzVlSS')
library(rsconnect)
rsconnect::setAccountInfo(name='ketanthakare', token='ABFA6C8131B8845EA66D54A9B42A9C94', secret='EU8d8/qQS+kzvNXpBr+U8tP0thvXPBASszMzVlSS')
install.packages('plotly')
library(shinydashboard)
library(plotly)
library(shiny)
pickup_aug <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Aug_2016")
pickup_sept <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Sept_2016")
pickup_jul <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Jul_2016")
pickup_nov <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Nov_2016")
pickup_dec <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Dec_2016")
pickup_jun <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Jun_2016")
pickup_oct <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Oct_2016")
pickup_aug <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Aug_2016.csv")
pickup_sept <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Sept_2016.csv")
pickup_jul <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Jul_2016.csv")
pickup_nov <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Nov_2016.csv")
pickup_dec <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Dec_2016.csv")
pickup_jun <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Jun_2016.csv")
pickup_oct <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Oct_2016.csv")
MyMerge       <- function(x, y) {
df            <- merge(x,
y,
by = "row.names",
all.x = F,
all.y = F)
rownames(df)  <- df$Row.names
df$Row.names  <- NULL
return(df)
}
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
View(pickup_combined)
MyMerge       <- function(x, y) {
df            <- rbind(x,
y)
return(df)
}
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
View(pickup_combined)
str(pickup_combined)
head(pickup_combined)
summarise(pickup_combined)
summarise(pickup_combined)
str(pickup_combined)
summarise(pickup_combined)
pickups_combined = transform(pickup_combined, Date = colsplit(Date, split = " ", names = c('Date', 'Time')))
library(reshape)
install.packages('reshape')
library(reshape)
pickups_combined = transform(pickup_combined, Date = colsplit(Date, split = " ", names = c('Date', 'Time')))
pickups_combined = transform(pickup_combined, Date = colsplit(Date, split = " ", names = c('Date', 'Time', "am/pm")))
install.packages("splitstackshape")
library(splitstackshape)
cSplit(pickup_combined, "Date", " ")
View(pickup_combined)
pickup_combined <- cSplit(pickup_combined, "Date", " ")
View(pickup_combined)
getwd()
setwd("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data")
dplyr::rename(pickup_combined,Date_1 = Date, Date_2 = Time, Date_3 = AM/PM)
dplyr::rename(pickup_combined, Date = Date_1, Time = Date_2, AM/PM = Date_3)
dplyr::rename(pickup_combined, c(Date = Date_1, Time = Date_2, AM/PM = Date_3))
dplyr::rename(pickup_combined, Date = Date_1)
pickups_combined <- Reduce(pickup_combined, list(Date, Time, AM/PM), list(Date, Date_2, Date_3))
pickups_combined <- Reduce(pickup_combined, list(Date, Time, AM/PM), list(Date_1, Date_2, Date_3))
pickups_combined <- Reduce(pickup_combined, list(Date, Time, AM/PM), list(Date_1, Date_2, Date_3))
pickups_combined <- Reduce(pickup_combined, c(Date, Time, AM/PM), c(Date_1, Date_2, Date_3))
pickups_combined <- Reduce(column_renames, list(pickup_combined), list(Date, Time, AM/PM), list(Date_1, Date_2, Date_3))
column_renames <- function(df, new_name, old_name) {
dplyr::rename(df, new_name = old_name)
return(df)
}
pickups_combined <- Reduce(column_renames, list(pickup_combined), list(Date, Time, AM/PM), list(Date_1, Date_2, Date_3))
pickups_combined <- Reduce(column_renames, list(pickup_combined), list(Date, Time, AM/PM), list(pickup_combined$Date_1, pickup_combined$Date_2, pickup_combined$Date_3))
pickups_combined <- Reduce(column_renames, pickup_combined, list(Date, Time, AM/PM), list(pickup_combined$Date_1, pickup_combined$Date_2, pickup_combined$Date_3))
column_renames <- function(df, new_name, old_name) {
df = dplyr::rename(df, new_name = old_name)
return(df)
}
column_renames(pickup_combined, Date, Date_1)
column_renames(pickup_combined, Time, Date_2)
column_renames(pickup_combined, AM/PM, Date_3)
pickup_combined = dplyr::rename(pickup_combined, Date = Date_1)
pickup_combined = dplyr::rename(pickup_combined, Time = Date_2)
pickup_combined = dplyr::rename(pickup_combined, AM_PM = Date_3)
View(pickup_combined)
str(pickup_combined)
pickup_combined$Date <- as.Date(pickup_combined$Date, format = "%m/%d/%Y")
View(pickup_combined)
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined = dplyr::rename(pickup_combined, Date = Date_1)
pickup_combined = dplyr::rename(pickup_combined, Time = Date_2)
pickup_combined = dplyr::rename(pickup_combined, AM_PM = Date_3)
pickup_combined <- cSplit(pickup_combined, "Date", " ")
pickup_combined = dplyr::rename(pickup_combined, Date = Date_1)
pickup_combined = dplyr::rename(pickup_combined, Time = Date_2)
pickup_combined = dplyr::rename(pickup_combined, AM_PM = Date_3)
View(pickup_combined)
>strptime
?strptime
pickup_combined$Date <- as.Date(pickup_combined$Date, format = "%m/%d/%y")
View(pickup_combined)
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined$Date <- as.Date(pickup_combined$Date, format = "%m/%d/%y %I:%M %p")
View(pickup_combined)
pickup_combined$Date <- as.POSIXct(pickup_combined$Date, format = "%m/%d/%y %I:%M %p", tz = "GMT")
ymd_hms("2010-01-01 02:30:30 PM")
install.packages('lubridate')
library(lubridate)
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined = dplyr::rename(pickup_combined, Date = Date_1)
pickup_combined = dplyr::rename(pickup_combined, Time = Date_2)
pickup_combined = dplyr::rename(pickup_combined, AM_PM = Date_3)
ymd_hms("2010-01-01 02:30:30 PM")
ymd_hm("2010-01-01 02:30 PM")
ymd_hm(pickup_combined$Date)
parse_date_time(pickup_combined$Date, c("%m-%d-%y %I:%M %p"), exact = TRUE)
parse_date_time(pickup_combined$Date, c("%m/%d/%y %I:%M %p"), exact = TRUE)
pickup_combined <- parse_date_time(pickup_combined$Date, c("%m/%d/%y %I:%M %p"), exact = TRUE)
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined = dplyr::rename(pickup_combined, Date = Date_1)
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined <- parse_date_time(pickup_combined$Date, c("%m/%d/%y %I:%M %p"), exact = TRUE)
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined$Date <- parse_date_time(pickup_combined$Date, c("%m/%d/%y %I:%M %p"), exact = TRUE)
View(pickup_combined)
str(pickup_combined)
summarise(pickup_combined)
dplyr::n_distinct(pickup_combined$Service_Provider)
d <- ggplot(pickup_combined, aes(Service_Provider))
d + geom_bar(
)
pickup_combined %>% group_by(Service_Provider)
pickup_aug <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Aug_2016.csv")
pickup_sept <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Sept_2016.csv")
pickup_jul <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Jul_2016.csv")
pickup_nov <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Nov_2016.csv")
pickup_dec <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Dec_2016.csv")
pickup_jun <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Jun_2016.csv")
pickup_oct <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Oct_2016.csv")
MyMerge       <- function(x, y) {
df            <- rbind(x,
y)
return(df)
}
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined = dplyr::rename(pickup_combined, Date = Date_1)
pickup_combined = dplyr::rename(pickup_combined, Time = Date_2)
pickup_combined = dplyr::rename(pickup_combined, AM_PM = Date_3)
pickup_combined$Date <- parse_date_time(pickup_combined$Date, c("%m/%d/%y %I:%M %p"), exact = TRUE)
View(pickup_combined)
str(pickup_combined)
d <- ggplot(pickup_combined, aes(Service_Provider))
d + geom_bar()
write.csv(pickup_combined, path = "C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/pickup_combined.csv")
write.csv(pickup_combined, "C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/pickup_combined.csv")
source('~/.active-rstudio-document')
pickup_aug <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Aug_2016.csv")
pickup_sept <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Sept_2016.csv")
pickup_jul <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Jul_2016.csv")
pickup_nov <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Nov_2016.csv")
pickup_dec <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Dec_2016.csv")
pickup_jun <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Jun_2016.csv")
pickup_oct <- read.csv("C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/AVN_TNC_PickUp_Oct_2016.csv")
MyMerge       <- function(x, y) {
df            <- rbind(x,
y)
return(df)
}
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined = dplyr::rename(pickup_combined, Date = Date_1)
pickup_combined = dplyr::rename(pickup_combined, Time = Date_2)
pickup_combined = dplyr::rename(pickup_combined, AM_PM = Date_3)
pickup_combined$Date <- parse_date_time(pickup_combined$Date, c("%m/%d/%y %I:%M %p"), exact = TRUE)
View(pickup_combined)
str(pickup_combined)
d <- ggplot(pickup_combined, aes(Service_Provider))
d + geom_bar()
write.csv(pickup_combined, "C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/pickup_combined.csv")
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
library(tidyr)
separate(pickup_combined, Date, into = c("Date", "Hour", "AM/PM"), sep = " ")
pickup_combined$Date <- parse_date_time(pickup_combined$Date, c("%m/%d/%y"), exact = TRUE)
pickup_combined <- separate(pickup_combined, Date, into = c("Date", "Hour", "AM/PM"), sep = " ")
pickup_combined$Date <- parse_date_time(pickup_combined$Date, c("%m/%d/%y"), exact = TRUE)
group_by(pickup_combined, c(Date))
temp = group_by(pickup_combined, c(Date))
temp
temp = group_by(pickup_combined, c(Date, Service_Provider))
temp = group_by(pickup_combined, c(Date))
temp
View(pickup_combined)
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
View(pickup_combined)
pickup_combined <- separate(pickup_combined, Date, into = c("Date", "Hour", "AM/PM"), sep = " ")
View(pickup_combined)
pickup_combined$Date <- as.Date(pickup_combined$Date, format = "%m/%d/%y")
View(pickup_combined)
temp = group_by(pickup_combined, Date)
temp
pickup_combined$Hour <- NULL
pickup_combined$`AM/PM`<- NULL
View(pickup_combined)
temp = group_by(pickup_combined, Date)
temp
pickup_combined %>% group_by(Date, Service_Provider) %>% dplyr::count()
new = pickup_combined %>% group_by(Date, Service_Provider) %>% dplyr::count()
View(new)
pickup_combined = pickup_combined %>% group_by(Date, Service_Provider) %>% dplyr::count()
pickup_combined = pickup_combined %>% group_by(Date, Service_Provider) %>% dplyr::count()
pickup_combined = dplyr::rename(pickup_combined, Total_Pickups = n )
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined <- separate(pickup_combined, Date, into = c("Date", "Hour", "AM/PM"), sep = " ")
pickup_combined$Date <- as.Date(pickup_combined$Date, format = "%m/%d/%y")
pickup_combined$Hour <- NULL
pickup_combined$`AM/PM`<- NULL
pickup_combined = pickup_combined %>% group_by(Date, Service_Provider) %>% dplyr::count()
pickup_combined = dplyr::rename(pickup_combined, Total_Pickups = n )
View(pickup_combined)
pickup_combined <- Reduce(MyMerge, list(pickup_jun, pickup_jul, pickup_aug, pickup_sept, pickup_oct, pickup_nov, pickup_dec))
pickup_combined <- separate(pickup_combined, Date, into = c("Date", "Hour", "AM/PM"), sep = " ")
pickup_combined$Date <- as.Date(pickup_combined$Date, format = "%m/%d/%y")
pickup_combined$Hour <- NULL
pickup_combined$`AM/PM`<- NULL
TotalPUbyDate = pickup_combined %>% group_by(Date, Service_Provider) %>% dplyr::count()
TotalPUbyDate = dplyr::rename(pickup_combined, Total_Pickups = n )
View(TotalPUbyDate)
pickup_combined %>% group_by(Service_Provider) %>% dplyr::count()
View(TotalPUbyDate)
write.csv(TotalPUbyDate, "C:/Users/admin/Desktop/EeD/R/Shiny_UbervsLyft/Data/TotalPUbyDate.csv")
temp = pickup_combined %>% group_by(month=floor_date(Date, "month")) %>% dplyr::count()
View(temp)
temp = pickup_combined %>% group_by(month=floor_date(Date, "month"), Service_Provider) %>% dplyr::count()
View(temp)
View(TotalPUbyDate)
ggplot(TotalPUbyDate, aes(Service_Provider, n)) + geom_line()
ggplot(TotalPUbyDate, aes(Date, n)) + geom_line()
ggplot(TotalPUbyDate, aes(Date, n), colour = Service_Provider) + geom_line()
ggplot(TotalPUbyDate, aes(Date, n), colour = Service_Provider) + geom_line()
ggplot(TotalPUbyDate, aes(Date, n, colour = Service_Provider)) + geom_line()
ggplot(TotalPUbyDate, aes(Date, n, colour = Service_Provider)) + geom_bar()
ggplot(TotalPUbyDate, aes(Date, colour = Service_Provider)) + geom_bar()
ggplot(TotalPUbyDate, aes(Service_Provider)) + geom_bar()
ggplot(TotalPUbyDate, aes(Date, n, colour = Service_Provider)) + geom_bar()
ggplot(TotalPUbyDate, aes(Date, colour = Service_Provider)) + geom_bar()
ggplot(TotalPUbyDate, aes(Date, colour = Service_Provider)) + geom_col()
ggplot(TotalPUbyDate, aes(Date, n, colour = Service_Provider)) + geom_col()
ggplot(temp, aes(Date, n, colour = Service_Provider)) + geom_col()
View(temp)
ggplot(temp, aes(month, n, colour = Service_Provider)) + geom_col()
ggplot(temp, aes(month, n, colour = Service_Provider)) + geom_col(position = dodge)
ggplot(temp, aes(month, n, colour = Service_Provider)) + geom_bar(position = dodge)
ggplot(temp, aes(month, n, colour = Service_Provider)) + geom_bar(position = "dodge")
ggplot(temp, aes(month, colour = Service_Provider)) + geom_bar(position = "dodge")
ggplot(temp, aes(Service_Provider)) + geom_bar(position = "dodge")
ggplot(temp, aes(month)) + geom_bar(position = "dodge")
f + geom_col(position = 'dodge')
f <- ggplot(temp, aes(x = month, y = n))
f + geom_col(position = 'dodge')
f <- ggplot(temp, aes(x = month, y = n, colour = Service_Provider))
f + geom_col(position = 'dodge')
f <- ggplot(temp, aes(x = month, y = n, fill = Service_Provider))
f + geom_col(position = 'dodge')
f + geom_col(position = 'dodge', stat = identity())
f + geom_col(position = 'dodge', stat = "identity")
pickup_combined[pickup_combined$Service_Provider = "Wingz"]
pickup_combined[pickup_combined$Service_Provider == "Wingz"]
pickup_combined$`AM/PM`<- NULL
View(pickup_combined)
pickup_combined[!(pickup_combined$Service_Provider == "Wingz")]
new = pickup_combined[!(pickup_combined$Service_Provider == "Wingz"),]
View(new)
str(new)
new = TotalPUbyDate[!(TotalPUbyDate$Service_Provider == "Wingz"),]
str(new)
news = TotalPUbyDate[!(TotalPUbyDate$Service_Provider == "Wingz"),]
View(news)
str(news)
news = TotalPUbyDate[!(TotalPUbyDate$Service_Provider == "Lyft" |TotalPUbyDate$Service_Provider == "Uber" ),]
View(news)
news = TotalPUbyDate[!(TotalPUbyDate$Service_Provider == "Wingz"),]
View(news)
str(news)
View(TotalPUbyDate)
